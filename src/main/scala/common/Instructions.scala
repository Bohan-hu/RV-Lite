package common

import chisel3._
import chisel3.util._

object Instructions {
  // Loads
  def LB = BitPat("b?????????????????000?????0000011")

  def LH = BitPat("b?????????????????001?????0000011")

  def LW = BitPat("b?????????????????010?????0000011")

  def LD = BitPat("b?????????????????011?????0000011")

  def LBU = BitPat("b?????????????????100?????0000011")

  def LHU = BitPat("b?????????????????101?????0000011")

  def LWU = BitPat("b?????????????????110?????0000011")

  // Stores
  def SB = BitPat("b?????????????????000?????0100011")

  def SH = BitPat("b?????????????????001?????0100011")

  def SW = BitPat("b?????????????????010?????0100011")

  def SD = BitPat("b?????????????????011?????0100011")

  // Shifts
  def SLL = BitPat("b0000000??????????001?????0110011")

  def SLLW = BitPat("b0000000??????????001?????0111011")

  def SLLI = BitPat("b000000???????????001?????0010011")

  def SLLIW = BitPat("b0000000??????????001?????0011011")

  def SRL = BitPat("b0000000??????????101?????0110011")

  def SRLW = BitPat("b0000000??????????101?????0111011")

  def SRLI = BitPat("b000000???????????101?????0010011")

  def SRLIW = BitPat("b0000000??????????101?????0011011")

  def SRA = BitPat("b0100000??????????101?????0110011")

  def SRAW = BitPat("b0100000??????????101?????0111011")

  def SRAI = BitPat("b010000???????????101?????0010011")

  def SRAIW = BitPat("b0100000??????????101?????0011011")

  // Arithmetic
  def ADD = BitPat("b0000000??????????000?????0110011")

  def ADDW = BitPat("b0000000??????????000?????0111011")

  def ADDI = BitPat("b?????????????????000?????0010011")

  def ADDIW = BitPat("b?????????????????000?????0011011")

  def SUB = BitPat("b0100000??????????000?????0110011")

  def SUBW = BitPat("b0100000??????????000?????0111011")

  def LUI = BitPat("b?????????????????????????0110111")

  def AUIPC = BitPat("b?????????????????????????0010111")

  // Logical
  def XOR = BitPat("b0000000??????????100?????0110011")

  def XORI = BitPat("b?????????????????100?????0010011")

  def OR = BitPat("b0000000??????????110?????0110011")

  def ORI = BitPat("b?????????????????110?????0010011")

  def AND = BitPat("b0000000??????????111?????0110011")

  def ANDI = BitPat("b?????????????????111?????0010011")

  // Compare
  def SLT = BitPat("b0000000??????????010?????0110011")

  def SLTI = BitPat("b?????????????????010?????0010011")

  def SLTU = BitPat("b0000000??????????011?????0110011")

  def SLTIU = BitPat("b?????????????????011?????0010011")

  // Branches
  def BEQ = BitPat("b?????????????????000?????1100011")

  def BNE = BitPat("b?????????????????001?????1100011")

  def BLT = BitPat("b?????????????????100?????1100011")

  def BGE = BitPat("b?????????????????101?????1100011")

  def BLTU = BitPat("b?????????????????110?????1100011")

  def BGEU = BitPat("b?????????????????111?????1100011")

  // Jump & Link
  def JALR = BitPat("b?????????????????000?????1100111")

  def JAL = BitPat("b?????????????????????????1101111")

  // Synch
  def FENCE = BitPat("b?????????????????000?????0001111")

  def FENCE_I = BitPat("b?????????????????001?????0001111")

  // ZiCSR
  def CSRRW = BitPat("b?????????????????001?????1110011")

  def CSRRS = BitPat("b?????????????????010?????1110011")

  def CSRRC = BitPat("b?????????????????011?????1110011")

  def CSRRWI = BitPat("b?????????????????101?????1110011")

  def CSRRSI = BitPat("b?????????????????110?????1110011")

  def CSRRCI = BitPat("b?????????????????111?????1110011")

  // RVM（暂不需要）
  def MUL = BitPat("b0000001??????????000?????0110011")

  def MULW = BitPat("b0000001??????????000?????0111011")

  def MULH = BitPat("b0000001??????????001?????0110011")

  def MULHSU = BitPat("b0000001??????????010?????0110011")

  def MULHU = BitPat("b0000001??????????011?????0110011")

  def DIV = BitPat("b0000001??????????100?????0110011")

  def DIVW = BitPat("b0000001??????????100?????0111011")

  def DIVU = BitPat("b0000001??????????101?????0110011")

  def DIVUW = BitPat("b0000001??????????101?????0111011")

  def REM = BitPat("b0000001??????????110?????0110011")

  def REMW = BitPat("b0000001??????????110?????0111011")

  def REMU = BitPat("b0000001??????????111?????0110011")

  def REMUW = BitPat("b0000001??????????111?????0111011")

  // SYSTEM Instruction
  def ECALL = BitPat("b00000000000000000000000001110011")

  def EBREAK = BitPat("b00000000000100000000000001110011")

  // TRAP RETURN INSTURCTIONS
  def URET = BitPat("b00000000001000000000000001110011")

  def SRET = BitPat("b00010000001000000000000001110011")

  def MRET = BitPat("b00110000001000000000000001110011")

  // SUPERVISOR MEMORY MANAGEMENT INSTRUCTION
  def SFENCE_VMA = BitPat("b0001001??????????000000001110011")

  // INTERRUPT MANAGEMENT INSTRUCTION
  def WFI = BitPat("b00010000010100000000000001110011")

}

class RTypeInstruction extends Bundle {
  val funct7 = UInt(7.W)
  val rs2 = UInt(5.W)
  val rs1 = UInt(5.W)
  val funct3 = UInt(3.W)
  val rd = UInt(5.W)
  val opcode = UInt(7.W)

  def imm_gen = {
    0.U
  }
}

class ITypeInstruction extends Bundle {
  val imm = UInt(12.W)
  val rs1 = UInt(5.W)
  val funct3 = UInt(3.W)
  val rd = UInt(5.W)
  val opcode = UInt(7.W)

  def imm_gen = {
    imm
  }
}

class STypeInstruction extends Bundle {
  val imm_hi = UInt(7.W)
  val rs2 = UInt(5.W)
  val rs1 = UInt(5.W)
  val funct3 = UInt(3.W)
  val imm_lo = UInt(5.W)
  val opcode = UInt(7.W)

  def imm_gen = {
    val res = Cat(imm_hi, imm_lo)
    res
  }
}

class BTypeInstruction extends Bundle {
  val imm_12 = UInt(1.W)
  val imm_10_5 = UInt(6.W)
  val rs2 = UInt(5.W)
  val rs1 = UInt(5.W)
  val funct3 = UInt(3.W)
  val imm_4_1 = UInt(4.W)
  val imm_11 = UInt(1.W)
  val opcode = UInt(7.W)

  def imm_gen = {
    val res = Cat(imm_12, imm_11, imm_10_5, imm_4_1, 0.U(1.W))
    res
  }
}

class UTypeInstruction extends Bundle {
  val imm = UInt(20.W)
  val rd = UInt(5.W)
  val opcode = UInt(7.W)

  def imm_gen = {
    val res = Cat(imm, 0.U(12.W))
    res
  }
}

class JTypeInstruction extends Bundle {
  val imm_20 = UInt(1.W)
  val imm_10_1 = UInt(10.W)
  val imm_11 = UInt(1.W)
  val imm_19_12 = UInt(8.W)
  val rd = UInt(5.W)
  val opcode = UInt(7.W)

  def imm_gen = {
    val res = Cat(imm_20, imm_19_12, imm_11, imm_10_1, 0.U(1.W))
    res
  }
}


class test extends Module {
  val io = IO(new Bundle() {
    val instr = Input(UInt(32.W))
    val detached = Output(new JTypeInstruction)
    val imm = Output(UInt(32.W))
  })
  io.detached := io.instr.asTypeOf(new JTypeInstruction)
  io.imm := io.detached.imm_gen
}

object test extends App {
  val stage = new chisel3.stage.ChiselStage()
  stage.emitVerilog(new test)
}